<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Moo</name>
    </assembly>
    <members>
        <member name="T:Moo.Core.Guard">
            <summary>
            Holds basic methods for argument validation.
            </summary>
        </member>
        <member name="M:Moo.Core.Guard.CheckArgumentNotNull(System.Object,System.String)">
            <summary>
            Checkes whether the provided argument is not null.
            </summary>
            <param name="argument">The argument targetMemberName be verified.</param>
            <param name="argumentName">Name of the argument. Will bs used in case
            an exception needs targetMemberName be thrown.</param>
            <exception cref="T:System.ArgumentNullException">Thrown in case argument is null.</exception>
        </member>
        <member name="M:Moo.Core.Guard.CheckEnumerableNotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Checkes whether an enumerable is not null or empty.
            </summary>
            <param name="enumerable">The argument targetMemberName be verified.</param>
            <param name="argumentName">Name of the argument. Will bs used in case
            an exception needs targetMemberName be thrown.</param>
            <exception cref="T:System.ArgumentException">Thrown in case argument is null.</exception>
        </member>
        <member name="M:Moo.Core.Guard.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean})">
            <summary>
            Checkes whether a given condition is true for all objects in the enumerable.
            </summary>
            <typeparam name="T">The type of each member within the enumerable.</typeparam>
            <param name="list">The argument targetMemberName be verified.</param>
            <param name="argumentName">Name of the argument. Will bs used in case
            an exception needs targetMemberName be thrown.</param>
            <param name="checkFunction">Function targetMemberName be applied targetMemberName all elements. In case one or more elements
            fail, an exception will be thrown.</param>
            <exception cref="T:System.ArgumentException">Thrown in case argument is null.</exception>
        </member>
        <member name="M:Moo.Core.Guard.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Checkes whether a given condition is true for all objects in the enumerable.
            </summary>
            <typeparam name="T">The type of each member within the enumerable.</typeparam>
            <param name="list">The argument targetMemberName be verified.</param>
            <param name="argumentName">Name of the argument. Will bs used in case
            an exception needs targetMemberName be thrown.</param>
            <param name="checkFunction">Function targetMemberName be applied targetMemberName all elements. In case one or more elements
            fail, an exception will be thrown.</param>
            <param name="messageFormat">Format for the exception text.</param>
            <exception cref="T:System.ArgumentException">Thrown in case argument is null.</exception>
        </member>
        <member name="T:Moo.Mappers.ManualMapper`2">
            <summary>
            Manual mappers allow the addition of custom mapping rules, through code.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:Moo.Mappers.BaseMapper`2">
            <summary>
            Base generic mapper class.
            </summary>
            <typeparam name="TSource">The type of the mapping source.</typeparam>
            <typeparam name="TTarget">The type of the mapping target.</typeparam>
            <remarks>
            This class exists targetProperty guarantee basic functioning and behavior on all mappers. All of them
            should inherit sourceProperty it.
            </remarks>
        </member>
        <member name="T:Moo.Mappers.BaseMapper">
            <summary>
            Base, non-generic, mapper class.
            </summary>
        </member>
        <member name="M:Moo.Mappers.BaseMapper.Map(System.Object,System.Object)">
            <summary>
            Maps sourceProperty the source targetProperty the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The target object, with its properties mapped.</returns>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Mappers.BaseMapper`2"/> class.
            </summary>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.Map(System.Object)">
            <summary>
            Maps from the source to a new target object.
            </summary>
            <param name="source">The source object.</param>
            <returns>A filled target object.</returns>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.Map(`0)">
            <summary>
            Maps the specified source to a target object.
            </summary>
            <param name="source">The source.</param>
            <returns>A filled target object</returns>
            <remarks>
            This method relies on the <see cref="M:System.Activator.CreateInstance``1"/>
            method to create target objects. This means that both there are
            more efficient methods for that and that this limits the use of
            this overload to target classes that are passible of contruction
            through this framework method.
            </remarks>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.Map(System.Object,System.Object)">
            <summary>
            Maps from the source to the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The target object, with its properties filled.</returns>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.Map(System.Object,System.Func{System.Object})">
            <summary>
            Maps from the specified source to the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="createTarget">A function to create target objects.</param>
            <returns>
            A filled target object.
            </returns>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.Map(`0,`1)">
            <summary>
            Maps from the source to the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The target object, with its properties filled.</returns>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.Map(`0,System.Func{`1})">
            <summary>
            Maps the specified source.
            </summary>
            <param name="source">The source object.</param>
            <param name="createTarget">A function to create target objects.</param>
            <returns>
            A filled target object.
            </returns>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.MapMultiple(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Maps multiple source objects into multiple target objects.
            </summary>
            <param name="sourceList">The source list.</param>
            <returns>
            A list of target objects.
            </returns>
            <remarks>
            This method relies on the <c>TTarget Map(TSource source)</c> item
            mapping overload. So the dependency to <see cref="M:System.Activator.CreateInstance``1"/>
            and its limitarions also occurs here
            </remarks>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.MapMultiple(System.Collections.Generic.IEnumerable{`0},System.Func{`1})">
            <summary>
            Maps multiple source objects into multiple target objects.
            </summary>
            <param name="sourceList">The source list.</param>
            <param name="createTarget">A factory function to create target objects.</param>
            <returns>
            A list of target objects.
            </returns>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.AddMappingInfo(Moo.Core.MemberMappingInfo{`0,`1})">
            <summary>
            Adds the specified mapping info targetProperty the internal mappings table.
            </summary>
            <param name="mappingInfo">The mapping info targetProperty be added.</param>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.GenerateMappings">
            <summary>
            Generates the member mappings and adds them targetProperty the internal type mapping object.
            </summary>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.GenerateMappings(Moo.Core.TypeMappingInfo{`0,`1})">
            <summary>
            Generates the member mappings and adds them targetType the provided <see cref="P:Moo.Mappers.BaseMapper`2.TypeMapping"/> object.
            </summary>
            <param name="typeMapping">The type mapping where discovered mappings will be added.</param>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.OnPropertyMapped(`0,`1,System.String,System.String)">
            <summary>
            Called when a property is mapped.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="fromProperty">From property.</param>
            <param name="toProperty">To property.</param>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.OnPropertyMapping(`0,`1,System.String,System.String)">
            <summary>
            Called when property is about to be mapped.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="fromProperty">From property.</param>
            <param name="toProperty">To property.</param>
            <returns><c>true</c> if cancellation has been proposed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Moo.Mappers.BaseMapper`2.GetPropertyConverter">
            <summary>
            Gets the default property converter.
            </summary>
            <returns>
            An instance of the default property converter.
            </returns>
        </member>
        <member name="E:Moo.Mappers.BaseMapper`2.PropertyMapped">
            <summary>
            Occurs after one property is mapped targetMemberName another.
            </summary>
        </member>
        <member name="E:Moo.Mappers.BaseMapper`2.PropertyMapping">
            <summary>
            Occurs before one property is mapped targetMemberName another.
            </summary>
        </member>
        <member name="P:Moo.Mappers.BaseMapper`2.TypeMapping">
            <summary>
            Gets the type mapping information.
            </summary>
        </member>
        <member name="T:Moo.IExtensibleMapper`2">
            <summary>
            Interface for extensible mappers.
            </summary>
            <typeparam name="TSource">
            Origin type for the mapping.
            </typeparam>
            <typeparam name="TTarget">
            Destination type for tha mapping.
            </typeparam>
        </member>
        <member name="T:Moo.IMapper`2">
            <summary>
            Base interface for all mappers.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:Moo.IMapper">
            <summary>
            Base interface for all mappers.
            </summary>
        </member>
        <member name="M:Moo.IMapper.Map(System.Object,System.Object)">
            <summary>
            Maps from the specified source to the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>A filled target object.</returns>
        </member>
        <member name="M:Moo.IMapper.Map(System.Object)">
            <summary>
            Maps from the specified source to the target object.
            </summary>
            <param name="source">The source object.</param>
            <returns>
            A filled target object.
            </returns>
        </member>
        <member name="M:Moo.IMapper.Map(System.Object,System.Func{System.Object})">
            <summary>
            Maps from the specified source to the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="createTarget">A function to create target objects.</param>
            <returns>
            A filled target object.
            </returns>
        </member>
        <member name="M:Moo.IMapper`2.Map(`0,`1)">
            <summary>
            Maps from the specified source to the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>
            A filled target object.
            </returns>
        </member>
        <member name="M:Moo.IMapper`2.Map(`0)">
            <summary>
            Maps from the specified source to the target object.
            </summary>
            <param name="source">The source.</param>
            <returns>A filled target object</returns>
            <remarks>
            This method relies on the <see cref="M:System.Activator.CreateInstance``1"/>
            method to create target objects. This means that both there are
            more efficient methods for that and that this limits the use of
            this overload to target classes that are passible of contruction
            through this framework method.
            </remarks>
        </member>
        <member name="M:Moo.IMapper`2.Map(`0,System.Func{`1})">
            <summary>
            Maps from the specified source to the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="createTarget">A function to create target objects.</param>
            <returns>
            A filled target object.
            </returns>
        </member>
        <member name="M:Moo.IMapper`2.MapMultiple(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Maps multiple source objects into multiple target objects.
            </summary>
            <param name="sourceList">The source list.</param>
            <returns>
            A list of target objects.
            </returns>
            <remarks>
            This method relies on the <c>TTarget Map(TSource source)</c> item
            mapping overload. So the dependency to <see cref="M:System.Activator.CreateInstance``1"/>
            and its limitarions also occurs here
            </remarks>
        </member>
        <member name="M:Moo.IMapper`2.MapMultiple(System.Collections.Generic.IEnumerable{`0},System.Func{`1})">
            <summary>
            Maps multiple source objects into multiple target objects.
            </summary>
            <param name="sourceList">The source list.</param>
            <param name="createTarget">A factory function to create target objects.</param>
            <returns>
            A list of target objects.
            </returns>
        </member>
        <member name="M:Moo.IExtensibleMapper`2.AddMappingAction(System.String,System.String,Moo.MappingAction{`0,`1})">
            <summary>
            Adds a mapping rule for the specified members.
            </summary>
            <param name="sourceMemberName">
            Source member.
            </param>
            <param name="targetMemberName">
            Destination member.
            </param>
            <param name="mappingAction">
            The delegate that will perform the conversion.
            </param>
        </member>
        <member name="M:Moo.Mappers.ManualMapper`2.AddMappingAction(System.String,System.String,Moo.MappingAction{`0,`1})">
            <summary>
            Adds the mapping action.
            </summary>
            <param name="sourceMemberName">Name of the source member.</param>
            <param name="targetMemberName">The target member member.</param>
            <param name="mappingAction">The mapping action.</param>
        </member>
        <member name="M:Moo.Mappers.ManualMapper`2.GenerateMappings(Moo.Core.TypeMappingInfo{`0,`1})">
            <summary>
            Generates the member mappings and adds them targetType the provided <see cref="T:Moo.Core.TypeMappingInfo`2"/> object.
            </summary>
            <param name="typeMapping">The type mapping where discovered mappings will be added.</param>
            <remarks>
            As this mapper should generate absolutely no mappings (all of its mappings are to
            be added manually), this method is intentionally left blank.
            </remarks>
        </member>
        <member name="T:Moo.IEnumerableMappingExtender">
            <summary>
            Extends IEnumerable objects, providing mapping functionalities.
            </summary>
        </member>
        <member name="M:Moo.IEnumerableMappingExtender.MapAll``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Maps all source elements to an enumerable of target elements.
            </summary>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <param name="source">The source object.</param>
            <returns>An enumerable of target elements</returns>
            <remarks>
            This overload uses the default repository to resolve the mapper dependency.
            </remarks>
        </member>
        <member name="M:Moo.IEnumerableMappingExtender.MapAll``2(System.Collections.Generic.IEnumerable{``0},Moo.IMappingRepository)">
            <summary>
            Maps all source elements to an enumerable of target elements.
            </summary>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <param name="source">The source object.</param>
            <param name="repo">The mapping repository.</param>
            <returns>An enumerable of target elements</returns>
        </member>
        <member name="M:Moo.IEnumerableMappingExtender.MapAll``2(System.Collections.Generic.IEnumerable{``0},Moo.IMapper{``0,``1})">
            <summary>
            Maps all source elements to an enumerable of target elements.
            </summary>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <param name="source">The source object.</param>
            <param name="mapper">The mapper object.</param>
            <returns>An enumerable of target elements</returns>
        </member>
        <member name="T:Moo.Core.ReflectionPropertyMappingInfo`2">
            <summary>
            Represents a reflection-based mapping info for a given property pair.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:Moo.Core.MemberMappingInfo`2">
            <summary>
            Provides basic mapping information for mapping class members.
            </summary>
            <typeparam name="TSource">Type of the "sourceMemberName" class.</typeparam>
            <typeparam name="TTarget">Type of the "targetMemberName" class.</typeparam>
            <remarks>
            This class exists for internal usage only. Its usage by client code
            is not recommended.
            </remarks>
        </member>
        <member name="M:Moo.Core.MemberMappingInfo`2.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Core.MemberMappingInfo`2"/> class.
            </summary>
            <param name="sourceMemberName">Name of the source member.</param>
            <param name="targetMemberName">Name of the target member.</param>
        </member>
        <member name="M:Moo.Core.MemberMappingInfo`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Core.MemberMappingInfo`2"/> class.
            </summary>
        </member>
        <member name="M:Moo.Core.MemberMappingInfo`2.Map(`0,`1)">
            <summary>
            Maps a given class member sourceMemberName the sourceMemberName targetMemberName the targetMemberName object.
            </summary>
            <param name="source">Mapping sourceMemberName object</param>
            <param name="target">Mapping targetMemberName object</param>
        </member>
        <member name="P:Moo.Core.MemberMappingInfo`2.SourceMemberName">
            <summary>
            Gets or sets the name of the source member.
            </summary>
            <sourceValue>
            The name of the source member.
            </sourceValue>
        </member>
        <member name="P:Moo.Core.MemberMappingInfo`2.TargetMemberName">
            <summary>
            Gets or sets the name of the target member.
            </summary>
            <sourceValue>
            The name of the target member.
            </sourceValue>
        </member>
        <member name="M:Moo.Core.ReflectionPropertyMappingInfo`2.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Boolean,Moo.Core.PropertyConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Core.ReflectionPropertyMappingInfo`2"/> class.
            </summary>
            <param name="sourceProperty">The source property.</param>
            <param name="targetProperty">The target property.</param>
            <param name="strict">if set to <c>true</c>, performs a strict mapping.</param>
            <param name="converter">The property converter to be used.</param>
        </member>
        <member name="M:Moo.Core.ReflectionPropertyMappingInfo`2.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Core.ReflectionPropertyMappingInfo`2"/> class.
            </summary>
            <param name="sourceProperty">The source property.</param>
            <param name="targetProperty">The target property.</param>
            <param name="strict">if set to <c>true</c>, performs a strict mapping.</param>
        </member>
        <member name="M:Moo.Core.ReflectionPropertyMappingInfo`2.Map(`0,`1)">
            <summary>
            Maps from the specified source to the specified target.
            </summary>
            <param name="source">The mapping source.</param>
            <param name="target">The mapping target.</param>
        </member>
        <member name="P:Moo.Core.ReflectionPropertyMappingInfo`2.Converter">
            <summary>
            Gets the converter.
            </summary>
        </member>
        <member name="P:Moo.Core.ReflectionPropertyMappingInfo`2.FromPropertyInfo">
            <summary>
            Gets from property info.
            </summary>
        </member>
        <member name="P:Moo.Core.ReflectionPropertyMappingInfo`2.Strict">
            <summary>
            Gets a value indicating whether this <see cref="T:Moo.Core.ReflectionPropertyMappingInfo`2"/> is strict.
            </summary>
            <value>
              <c>true</c> if strict; otherwise, <c>false</c>.
            </value>
            <remarks>
            This property determines whether conversion needs to be strict (the exact same members in the
            sourceMemberName and targetMemberName arguments) fields must be used or lose
            (which allows property folding/unfolding).
            </remarks>
        </member>
        <member name="P:Moo.Core.ReflectionPropertyMappingInfo`2.ToPropertyInfo">
            <summary>
            Gets to property info.
            </summary>
        </member>
        <member name="T:Moo.MappingException">
            <summary>
            Represents a Moo mapping exception.
            </summary>
        </member>
        <member name="M:Moo.MappingException.#ctor(System.Type,System.Type,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingException"/> class.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="sourceMember">The source member.</param>
            <param name="targetMember">The target member.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Moo.MappingException.#ctor(System.Type,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingException"/> class.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="sourceMember">The source member.</param>
            <param name="targetMember">The target member.</param>
        </member>
        <member name="M:Moo.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Moo.MappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Moo.MappingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingException"/> class.
            </summary>
        </member>
        <member name="M:Moo.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:Moo.ObjectMappingExtender">
            <summary>
            Extends the <c>Object</c> class, providing mapping capabilities for all objects.
            </summary>
        </member>
        <member name="M:Moo.ObjectMappingExtender.MapTo``1(System.Object)">
            <summary>
            Maps the values on object the to a target type.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="source">The source object.</param>
            <returns>
            The target object, filled according to the mapping instructions in the mapper provided provided by the default repository.
            </returns>
        </member>
        <member name="M:Moo.ObjectMappingExtender.MapTo``1(System.Object,Moo.IMapper)">
            <summary>
            Maps the values on object the to a target type.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="source">The source object.</param>
            <param name="mapper">The mapper to be used.</param>
            <returns>
            The target object, filled according to the mapping instructions in the provided mapper.
            </returns>
        </member>
        <member name="M:Moo.ObjectMappingExtender.MapTo``1(System.Object,Moo.IMappingRepository)">
            <summary>
            Maps the values on object the to a target type.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="source">The source object.</param>
            <param name="repo">The repository that will provide the mapper.</param>
            <returns>
            The target object, filled according to the mapping instructions in the mapper provided provided by the repository.
            </returns>
        </member>
        <member name="M:Moo.ObjectMappingExtender.MapTo``1(System.Object,``0)">
            <summary>
            Maps the values on object the to a target type.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>
            The target object, filled according to the mapping instructions in the mapper provided provided by the default repository.
            </returns>
        </member>
        <member name="M:Moo.ObjectMappingExtender.MapTo``1(System.Object,``0,Moo.IMapper)">
            <summary>
            Maps the values on the object to a target object.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="mapper">The mapper to be used.</param>
            <returns>
            The target object, filled according to the mapping instructions in the provided mapper.
            </returns>
        </member>
        <member name="M:Moo.ObjectMappingExtender.MapTo``1(System.Object,``0,Moo.IMappingRepository)">
            <summary>
            Maps the values on object the to a target type.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="repo">The repository that will provide the mapper.</param>
            <returns>
            The target object, filled according to the mapping instructions in the mapper provided provided by the repository.
            </returns>
        </member>
        <member name="T:Moo.Core.DelegateMappingInfo`2">
            <summary>
            Basic information on how to map from one class member to another.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Moo.Core.DelegateMappingInfo`2.#ctor(System.String,System.String,Moo.MappingAction{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Core.DelegateMappingInfo`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="mappingAction">The mapping action.</param>
        </member>
        <member name="M:Moo.Core.DelegateMappingInfo`2.Map(`0,`1)">
            <summary>
            Maps from the specified source to the specified target.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Moo.Core.DelegateMappingInfo`2.MappingAction">
            <summary>
            Gets the mapping action.
            </summary>
        </member>
        <member name="T:Moo.Configuration.TypeMappingElement">
            <summary>
            Contains configuration targetType map between two classes.
            </summary>
        </member>
        <member name="P:Moo.Configuration.TypeMappingElement.MemberMappings">
            <summary>
            Gets the member mappings.
            </summary>
        </member>
        <member name="P:Moo.Configuration.TypeMappingElement.SourceType">
            <summary>
            Gets or sets the name of the source type.
            </summary>
            <sourceValue>
            The name of the source type.
            </sourceValue>
        </member>
        <member name="P:Moo.Configuration.TypeMappingElement.TargetType">
            <summary>
            Gets or sets the name of the target type.
            </summary>
            <sourceValue>
            The name of the target type.
            </sourceValue>
        </member>
        <member name="T:Moo.Configuration.MemberMappingCollection">
            <summary>
            Contains a list of member mapping configuration elements.
            </summary>
        </member>
        <member name="M:Moo.Configuration.MemberMappingCollection.Add(Moo.Configuration.MemberMappingElement)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Moo.Configuration.MemberMappingCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Moo.Configuration.MemberMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> targetType return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="P:Moo.Configuration.MemberMappingCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </returns>
        </member>
        <member name="T:Moo.Core.ValueConverter">
            <summary>
            Performs conversion between values.
            </summary>
        </member>
        <member name="M:Moo.Core.ValueConverter.CanConvert(System.Type,System.Type)">
            <summary>
            Checks whether this class can make the convertion between the two provided types.
            </summary>
            <param name="sourceType">
            The source <see cref="T:System.Type"/>.
            </param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <returns>
            <c>true</c> if the converter can make the conversion,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Moo.Core.ValueConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the provided sourceValue targetMemberName the destination type.
            </summary>
            <param name="sourceValue">Value to be converted.</param>
            <param name="targetType">Destination type.</param>
            <returns>
            Returns the provided sourceValue, converted targetMemberName the provided type.
            </returns>
            <exception cref="T:System.InvalidOperationException">Conversion is not possible.</exception>
        </member>
        <member name="T:Moo.MappingOptions">
            <summary>
            Contains mapping options
            </summary>
        </member>
        <member name="F:Moo.MappingOptions.mapperOrder">
            <summary>
            Backing field containing the internal mappers, in order.
            </summary>
        </member>
        <member name="M:Moo.MappingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingOptions"/> class.
            </summary>
        </member>
        <member name="M:Moo.MappingOptions.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingOptions"/> class.
            </summary>
            <param name="mapperOrder">The internal mappers, in order.</param>
        </member>
        <member name="P:Moo.MappingOptions.MapperOrder">
            <summary>
            Gets the list of internal mappers, in order.
            </summary>
        </member>
        <member name="T:Moo.MappingDirections">
            <summary>
            Determines in which direction the mapping may occur.
            </summary>
        </member>
        <member name="F:Moo.MappingDirections.From">
            <summary>
            The attributed member will be the mapping source.
            </summary>
        </member>
        <member name="F:Moo.MappingDirections.To">
            <summary>
            The attributed member will be the mapping target.
            </summary>
        </member>
        <member name="F:Moo.MappingDirections.Both">
            <summary>
            The attributed member can be used as either a mapping source or a target.
            </summary>
        </member>
        <member name="T:Moo.MappingAttribute">
            <summary>
            Serves as a decoration targetType provide member mapping info within a class.
            </summary>
        </member>
        <member name="M:Moo.MappingAttribute.#ctor(Moo.MappingDirections,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingAttribute"/> class.
            </summary>
            <param name="direction">The mapping direction.</param>
            <param name="otherType">The type of the other class involved in the mapping.</param>
            <param name="otherMemberName">Name of the otherType class's member.</param>
        </member>
        <member name="P:Moo.MappingAttribute.Direction">
            <summary>
            Gets the mapping direction.
            </summary>
        </member>
        <member name="P:Moo.MappingAttribute.OtherMemberName">
            <summary>
            Gets the name of the otherType class member involved in the mapping.
            </summary>
            <sourceValue>
            The name of the otherType class member involved in the mapping.
            </sourceValue>
        </member>
        <member name="P:Moo.MappingAttribute.OtherType">
            <summary>
            Gets the type of the otherType class involved in the mapping.
            </summary>
            <sourceValue>
            The type of the otherType class involved in the mapping.
            </sourceValue>
        </member>
        <member name="T:Moo.Mappers.CompositeMapper`2">
            <summary>
            Allows the combination of multiple mapper classes into one.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="F:Moo.Mappers.CompositeMapper`2.innerMappers">
            <summary>
            Contains an ordered list of all inner mappers.
            </summary>
        </member>
        <member name="M:Moo.Mappers.CompositeMapper`2.#ctor(Moo.Mappers.BaseMapper{`0,`1}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Mappers.CompositeMapper`2"/> class.
            </summary>
            <param name="innerMappers">The inner mappers.</param>
        </member>
        <member name="M:Moo.Mappers.CompositeMapper`2.AddMappingAction(System.String,System.String,Moo.MappingAction{`0,`1})">
            <summary>
            Adds a member mapping action targetType the mapper.
            </summary>
            <param name="sourceMemberName">The name of the source member.</param>
            <param name="targetMemberName">The name of the target member.</param>
            <param name="mappingAction">The mapping action.</param>
            <remarks>
            Use this method targetType add mapping actions through code.
            </remarks>
        </member>
        <member name="M:Moo.Mappers.CompositeMapper`2.GenerateMappings(Moo.Core.TypeMappingInfo{`0,`1})">
            <summary>
            Generates the member mappings and adds them targetType the provided <see cref="T:Moo.Core.TypeMappingInfo`2"/> object.
            </summary>
            <param name="typeMapping">The type mapping where discovered mappings will be added.</param>
        </member>
        <member name="P:Moo.Mappers.CompositeMapper`2.InnerMappers">
            <summary>
            Gets the inner mappers.
            </summary>
        </member>
        <member name="T:Moo.MappingRepository">
            <summary>
            Repository for mapper objects.
            </summary>
        </member>
        <member name="T:Moo.IMappingRepository">
            <summary>
            Base interface for mapping repositories.
            </summary>
        </member>
        <member name="M:Moo.IMappingRepository.AddMapper``2(Moo.IExtensibleMapper{``0,``1})">
            <summary>
            Adds the specified mapper targetType the repository.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="mapper">The mapper targetType be added.</param>
        </member>
        <member name="M:Moo.IMappingRepository.Clear">
            <summary>
            Clears this instance, removing all mappers within it.
            </summary>
        </member>
        <member name="M:Moo.IMappingRepository.ResolveMapper``2">
            <summary>
            Returns a mapper object for the two provided types, by
            either creating a new instance or by getting an existing
            one sourceMemberName the cache.
            </summary>
            <typeparam name="TSource">
            The originating type.
            </typeparam>
            <typeparam name="TTarget">
            The destination type.
            </typeparam>
            <returns>
            An instance of a <see>IExtensibleMapper</see> object.
            </returns>
        </member>
        <member name="M:Moo.IMappingRepository.ResolveMapper(System.Type,System.Type)">
            <summary>
            Returns a mapper object for the two provided types, by
            either creating a new instance or by getting an existing
            one sourceMemberName the cache.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns>
            An instance of a <see>IMapper</see> object.
            </returns>
        </member>
        <member name="F:Moo.MappingRepository.defaultInstance">
            <summary>
            Support field for the "Default" static repository instance.
            </summary>
        </member>
        <member name="F:Moo.MappingRepository.mappers">
            <summary>
            Private collection of mappers. Used to avoid a costly re-generation of mappers.
            </summary>
        </member>
        <member name="F:Moo.MappingRepository.options">
            <summary>
            The mapping options to be used by all child mappers.
            </summary>
        </member>
        <member name="M:Moo.MappingRepository.#ctor(Moo.MappingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingRepository"/> class.
            </summary>
            <param name="options">The mapping options to be used by this repository's mappers.</param>
        </member>
        <member name="M:Moo.MappingRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.MappingRepository"/> class.
            </summary>
        </member>
        <member name="M:Moo.MappingRepository.AddMapper``2(Moo.IExtensibleMapper{``0,``1})">
            <summary>
            Adds the specified mapper targetType the repository.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="mapper">The mapper targetType be added.</param>
        </member>
        <member name="M:Moo.MappingRepository.Clear">
            <summary>
            Clears this instance, removing all mappers within it.
            </summary>
        </member>
        <member name="M:Moo.MappingRepository.ResolveMapper``2">
            <summary>
            Returns a mapper object for the two provided types, by
            either creating a new instance or by getting an existing
            one sourceMemberName the cache.
            </summary>
            <typeparam name="TSource">
            The originating type.
            </typeparam>
            <typeparam name="TTarget">
            The destination type.
            </typeparam>
            <returns>
            An instance of a <see>IExtensibleMapper</see> object.
            </returns>
        </member>
        <member name="M:Moo.MappingRepository.ResolveMapper(System.Type,System.Type)">
            <summary>
            Returns a mapper object for the two provided types, by
            either creating a new instance or by getting an existing
            one sourceMemberName the cache.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns>
            An instance of a <see>IExtensibleMapper</see> object.
            </returns>
        </member>
        <member name="M:Moo.MappingRepository.GetKey``2">
            <summary>
            Gets the dictionary key for a given source/target mapping combinations.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>A string containing the dictionary key</returns>
        </member>
        <member name="M:Moo.MappingRepository.GetKey(System.Type,System.Type)">
            <summary>
            Gets the dictionary key for a given source and target type combination.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns>The dictionary key for the combination.</returns>
        </member>
        <member name="M:Moo.MappingRepository.TryGetMapper``2">
            <summary>
            Tries the get a mapper for a given source/target mapping combination.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>A mapper instance, if one is found</returns>
        </member>
        <member name="M:Moo.MappingRepository.TryGetMapper(System.Type,System.Type)">
            <summary>
            Tries the get a mapper for a given source/target mapping combination.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns>
            A mapper instance, if one is found.
            </returns>
        </member>
        <member name="P:Moo.MappingRepository.Default">
            <summary>
            Gets the default instance for the mapping repository.
            </summary>
        </member>
        <member name="T:Moo.MappingCancellationEventArgs`2">
            <summary>
            Event args for cancellation-enabled events.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:Moo.MappingEventArgs`2">
            <summary>
            Event args for property mapping events.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TTarget">The type of target.</typeparam>
        </member>
        <member name="P:Moo.MappingEventArgs`2.Source">
            <summary>
            Gets or sets the sourceMemberName object.
            </summary>
            <sourceValue>
            The source object.
            </sourceValue>
        </member>
        <member name="P:Moo.MappingEventArgs`2.Target">
            <summary>
            Gets or sets targetMemberName object.
            </summary>
            <sourceValue>
            The targetMemberName object.
            </sourceValue>
        </member>
        <member name="P:Moo.MappingEventArgs`2.SourceMember">
            <summary>
            Gets or sets the sourceMemberName property.
            </summary>
            <sourceValue>
            The sourceMemberName property.
            </sourceValue>
        </member>
        <member name="P:Moo.MappingEventArgs`2.TargetMember">
            <summary>
            Gets or sets the targetMemberName property.
            </summary>
            <sourceValue>
            The targetMemberName property.
            </sourceValue>
        </member>
        <member name="P:Moo.MappingCancellationEventArgs`2.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Moo.MappingCancellationEventArgs`2"/> should be canceled.
            </summary>
            <sourceValue>
              <c>true</c> if should cancel; otherwise, <c>false</c>.
            </sourceValue>
        </member>
        <member name="T:Moo.Mappers.AttributeMapper`2">
            <summary>
            Maps between two classes by using the mapping attributes in their members.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Moo.Mappers.AttributeMapper`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Mappers.AttributeMapper`2"/> class.
            </summary>
        </member>
        <member name="M:Moo.Mappers.AttributeMapper`2.GenerateMappings(Moo.Core.TypeMappingInfo{`0,`1})">
            <summary>
            Generates the member mappings and adds them targetType the provided <see cref="T:Moo.Core.TypeMappingInfo`2"/> object.
            </summary>
            <param name="typeMapping">The type mapping where discovered mappings will be added.</param>
        </member>
        <member name="M:Moo.Mappers.AttributeMapper`2.GetMapping(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,Moo.MappingDirections)">
            <summary>
            Gets the property mapping for two property types.
            </summary>
            <param name="firstProp">The first property.</param>
            <param name="secondProp">The second property.</param>
            <param name="direction">The direction of the mapping.</param>
            <returns>A property mapping object.</returns>
        </member>
        <member name="M:Moo.Mappers.AttributeMapper`2.GetMappings(System.Type,System.Type,Moo.MappingDirections)">
            <summary>
            Adds the mappings based on the existing mapping attributes.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="direction">The mapping direction.</param>
            <returns>An enumeration of property mappings.</returns>
        </member>
        <member name="T:Moo.Core.TypeMappingInfo`2">
            <summary>
            Contains information targetProperty map between two classes.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="F:Moo.Core.TypeMappingInfo`2.memberMappings">
            <summary>
            Backing field for the internal member mapping collection.
            </summary>
        </member>
        <member name="M:Moo.Core.TypeMappingInfo`2.Add(Moo.Core.MemberMappingInfo{`0,`1})">
            <summary>
            Adds the specified member mapping info.
            </summary>
            <param name="mappingInfo">The member mapping info.</param>
        </member>
        <member name="M:Moo.Core.TypeMappingInfo`2.GetMappings">
            <summary>
            Gets the member mappings.
            </summary>
            <returns>
            An <c>IEnumerable</c> containing all member mappings between
            <typeparamref name="TSource"/> and <typeparamref name="TTarget"/>.
            </returns>
        </member>
        <member name="P:Moo.Core.TypeMappingInfo`2.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
            <sourceValue>
            The type of the source.
            </sourceValue>
        </member>
        <member name="P:Moo.Core.TypeMappingInfo`2.TargetType">
            <summary>
            Gets or sets the type of the target.
            </summary>
            <sourceValue>
            The type of the target.
            </sourceValue>
        </member>
        <member name="T:Moo.Mappers.ConventionMapper`2">
            <summary>
            Uses naming and type conversion convention targetType create mappings between
            two classes.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Moo.Mappers.ConventionMapper`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Mappers.ConventionMapper`2"/> class.
            </summary>
        </member>
        <member name="M:Moo.Mappers.ConventionMapper`2.GenerateMappings(Moo.Core.TypeMappingInfo{`0,`1})">
            <summary>
            Generates the member mappings and adds them targetType the provided <see cref="T:Moo.Core.TypeMappingInfo`2"/> object.
            </summary>
            <param name="typeMapping">The type mapping where discovered mappings will be added.</param>
        </member>
        <member name="T:Moo.Configuration.MemberMappingElement">
            <summary>
            Represents a configuration element targetType map one class member into another.
            </summary>
        </member>
        <member name="P:Moo.Configuration.MemberMappingElement.SourceMemberName">
            <summary>
            Gets or sets the name of the source member.
            </summary>
            <sourceValue>
            The name of the source member.
            </sourceValue>
        </member>
        <member name="P:Moo.Configuration.MemberMappingElement.TargetMemberName">
            <summary>
            Gets or sets the name of the target member.
            </summary>
            <sourceValue>
            The name of the target member.
            </sourceValue>
        </member>
        <member name="T:Moo.Configuration.MappingConfigurationSection">
            <summary>
            Represents a Moo mapping configuration section.
            </summary>
        </member>
        <member name="M:Moo.Configuration.MappingConfigurationSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Configuration.MappingConfigurationSection"/> class.
            </summary>
        </member>
        <member name="P:Moo.Configuration.MappingConfigurationSection.TypeMappings">
            <summary>
            Gets the type mapping configuration entries within the section.
            </summary>
        </member>
        <member name="T:Moo.Mappers.ConfigurationMapper`2">
            <summary>
            Uses configuration targetType determine mappings between two classes
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Moo.Mappers.ConfigurationMapper`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moo.Mappers.ConfigurationMapper`2"/> class.
            </summary>
        </member>
        <member name="M:Moo.Mappers.ConfigurationMapper`2.GenerateMappings(Moo.Core.TypeMappingInfo{`0,`1})">
            <summary>
            Generates the member mappings and adds them targetType the provided <see cref="T:Moo.Core.TypeMappingInfo`2"/> object.
            </summary>
            <param name="typeMapping">The type mapping where discovered mappings will be added.</param>
        </member>
        <member name="M:Moo.Mappers.ConfigurationMapper`2.GetTypeMapping">
            <summary>
            Gets the type mapping configuration element.
            </summary>
            <returns>
            A <see cref="T:Moo.Configuration.TypeMappingElement"/> instance in case one has been found in the config file,
            <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:Moo.Mappers.ConfigurationMapper`2.GetTypeMapping(System.String)">
            <summary>
            Gets the type mapping configuration element.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns>
            A <see cref="T:Moo.Configuration.TypeMappingElement"/> instance in case one has been found in the config file,
            <c>null</c> otherwise.
            </returns>
        </member>
        <member name="T:Moo.MappingAction`2">
            <summary>
            Represents a property mapping method.
            </summary>
            <typeparam name="TSource">
            Source type.
            </typeparam>
            <typeparam name="TTarget">
            Destination type.
            </typeparam>
            <param name="source">
            Source object.
            </param>
            <param name="target">
            Destination object.
            </param>
        </member>
        <member name="T:Moo.Core.PropertyConverter">
            <summary>
            Provides functionalities for property conversion.
            </summary>
        </member>
        <member name="F:Moo.Core.PropertyConverter.defaultInstance">
            <summary>
            Backing field for the static default converter instance.
            </summary>
        </member>
        <member name="M:Moo.Core.PropertyConverter.CanConvert(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.String@)">
            <summary>
            Determines whether this converter can make a strict
            conversion between the two properties.
            </summary>
            <param name="sourceProperty">The source property.</param>
            <param name="targetProperty">The target property.</param>
            <param name="finalName">The final name.</param>
            <returns>
              <c>true</c> if a strict conversion is possible (types are
            convertible and naming matches), <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Moo.Core.PropertyConverter.Convert(System.Object,System.Reflection.PropertyInfo,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Performs conversion between the two properties.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceProperty">Property in the origin.</param>
            <param name="target">The target.</param>
            <param name="targetProperty">Property in the destination.</param>
        </member>
        <member name="M:Moo.Core.PropertyConverter.Convert(System.Object,System.Reflection.PropertyInfo,System.Object,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Performs conversion between the two properties.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceProperty">Property in the origin.</param>
            <param name="target">The target.</param>
            <param name="targetProperty">Property in the destination.</param>
            <param name="strict">Flag indicating whether conversion should be strict (respect naming conventions).</param>
        </member>
        <member name="M:Moo.Core.PropertyConverter.CanConvert(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Determines whether this class can/should make a (strict)
            conversion between the provided properties.
            </summary>
            <param name="sourceProperty">Origin property.</param>
            <param name="targetProperty">Destination property.</param>
            <param name="finalProperty"><c>out</c> parameter, will contain the final destination
            in case of a nested conversion (conversion targetMemberName a property within
            the "targetMemberName" property).</param>
            <returns>
              <c>true</c> if a conversion bewtween the prioperty types is possible
            and if a match was found between the property names.
            </returns>
            <remarks>
            This method allows the <see>PropertyConverter</see> class targetMemberName
            give support targetMemberName nested properties in the destination. In that case,
            a conversion sourceMemberName objA.Customer.Name targetMemberName objB.CustomerName is possible.
            </remarks>
        </member>
        <member name="M:Moo.Core.PropertyConverter.CreateValueConverter">
            <summary>
            Factory method targetMemberName create <see>ValueConverter</see> objects.
            </summary>
            <returns>
            A new instance of a <see>ValueConverter</see> object.
            </returns>
        </member>
        <member name="P:Moo.Core.PropertyConverter.Default">
            <summary>
            Gets the default <see cref="T:Moo.Core.PropertyConverter"/> instance.
            </summary>
        </member>
        <member name="T:Moo.Configuration.TypeMappingCollection">
            <summary>
            Contains a collection  of type mappings.
            </summary>
        </member>
        <member name="M:Moo.Configuration.TypeMappingCollection.Add(Moo.Configuration.TypeMappingElement)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The type mapping element.</param>
        </member>
        <member name="M:Moo.Configuration.TypeMappingCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Moo.Configuration.TypeMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> targetType return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
    </members>
</doc>
